
<!-- Modal -->
<div class="modal fade" id="editArticleModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl ">
    <div class="modal-content">
        <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Edit Role</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        </div>
        <form id="editArticleForm">
            <div class="modal-body">
                <div class="card-body">
                    <div class="form-group">
                        <label>Title: </label>
                        <input type="text" placeholder="Email Address" class="form-control" name="title">
                        <div class="invalid-feedback d-none" id="titleEditFeedback"></div>
                    </div>
                    <div class="form-group">
                        <label>Slug: </label>
                        <input type="text" placeholder="slug" class="form-control" name="slug">
                        <div class="invalid-feedback d-none" id="slugEditFeedback"></div>
                    </div>
                    <div class="form-group">       
                        <label>Short text: </label>
                        <textarea class="form-control" name="short_text" rows="5"></textarea>
                        <div class="invalid-feedback d-none" id="short_textEditFeedback"></div>
                    </div>
                    <div class="form-group" style="height: 30vh;">
                        <p><label for="exampleFormControlFile1">Article image: </label></p>
                        <span class="h-75 " id="editArticlePreviewImageContainer">
                        <img class="h-100" src="" id="editteArticlePreviewImage"/>
                        <button type="button" class="close" aria-label="Close" id="editArticlePreviewImageButton">
                            <span aria-hidden="true">&times;</span>
                          </button>
                        </span>
                        <input type="file" class="form-control-file d-none" id="editArticleFileInput" name="image">
                        <div class="invalid-feedback d-none" id="imageEditFeedback"></div>
                    </div>
                    <div class="form-group">
                        <label>Full text: </label>
                        <textarea  name="full_text" id='editArticleFullText'>
                        </textarea>
                        <div class="invalid-feedback d-none" id="full_textEditFeedback"></div>
                    </div>
                </div>
            </div>                
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-warning" id="editButton">Edit</button>

            </div>
        </form>
    </div>
    </div>
</div>
<script>

$('#editArticleFileInput').on('input', (e) => {
        const reader = new FileReader();
        reader.onload = function (e) {
            $('#editArticlePreviewImageContainer').removeClass('d-none')
            $('#editArticlePreviewImage').attr('src', e.target.result)
        }
        reader.readAsDataURL(e.target.files[0]);
        $(e.target).addClass('d-none');
    })

    $('#editArticlePreviewImageButton').on('click', (e) => {
        $('#editArticleFileInput').removeClass('d-none').val('');
        $('#editArticlePreviewImageContainer').addClass('d-none');
    })

    $('#editArticleForm').on('submit', async (e) => {
        e.preventDefault();
        tinymce.triggerSave();
        const form = $('#editArticleForm');
    
        const formData = new FormData(form[ 0 ]);
    
        const response = await fetch(form.attr('action'), {
        method: 'POST',
        body: formData
        });
    
        const result = await response.json();
    
        if(result.success) {
        const table = $('#articles-table').DataTable();
        table.ajax.reload();
        $('#editArticleModal').modal('hide');
        } else {      
        const ids = result.errorMessages.map((message) => {
            const id = '#' + message.field + 'EditFeedback';
            $(id).removeClass('d-none').addClass('d-block').text(message.message)
            return id;
        });
        form.find('.invalid-feedback').not(ids.join(', ')).removeClass('d-block').addClass('d-none');
        }
    })
    
    $('#editArticleModal').on('hidden.bs.modal', function (e) {
        $('#editArticleModal').find('.invalid-feedback').removeClass('d-block').addClass('d-none');
        $('#editArticleForm').trigger("reset");
        $('#editArticleFileInput').addClass('d-none');
        $('#editArticlePreviewImageContainer').removeClass('d-none');
    })
    </script>

<script>
        tinymce.init({
        selector: '#editArticleFullText',
        plugins: 'a11ychecker advcode casechange formatpainter linkchecker autolink lists checklist media mediaembed pageembed permanentpen powerpaste table advtable image',
        toolbar: 'a11ycheck addcomment showcomments casechange checklist code formatpainter pageembed permanentpen table image',
        toolbar_mode: 'floating',
        tinycomments_mode: 'embedded',
        tinycomments_author: 'Author name',
        height: 700,
        relative_urls : false,
        images_upload_handler: async function (blobInfo, success, failure) {
        const formData = new FormData();
        formData.append('image', blobInfo.blob(), blobInfo.filename());

        const response = await fetch(window.location.origin + '/dashboard/articles/images', {
            method: 'POST',
            body: formData
        });

        const result = await response.json();

        if(result.success) {
            success(result.location)
          } else {      
            failure('HTTP Error: ')
          }

        },
        file_picker_types: 'image',
        }); 
</script>